diff --git a/c++/Makefile.am b/c++/Makefile.am
index 1567491d..b3a33189 100644
--- a/c++/Makefile.am
+++ b/c++/Makefile.am
@@ -287,7 +287,7 @@ libkj_la_SOURCES=                                              \
   src/kj/thread.c++                                            \
   src/kj/time.c++                                              \
   src/kj/filesystem.c++                                        \
-  src/kj/filesystem-disk-unix.c++                                   \
+  src/kj/filesystem-disk-unix.c++                              \
   src/kj/filesystem-disk-win32.c++                             \
   src/kj/test-helpers.c++                                      \
   src/kj/main.c++                                              \
@@ -295,7 +295,10 @@ libkj_la_SOURCES=                                              \
 
 libkj_test_la_LIBADD = libkj.la $(PTHREAD_LIBS)
 libkj_test_la_LDFLAGS = -release $(VERSION) -no-undefined
-libkj_test_la_SOURCES = src/kj/test.c++
+libkj_test_la_SOURCES =                                        \
+  src/kj/test.c++                                              \
+  src/kj/test-util.c++                                         \
+  src/kj/test-util.h
 
 if !LITE_MODE
 libkj_async_la_LIBADD = libkj.la $(ASYNC_LIBS) $(PTHREAD_LIBS)
diff --git a/c++/src/capnp/compiler/node-translator.c++ b/c++/src/capnp/compiler/node-translator.c++
index fd2577eb..797cfd7d 100644
--- a/c++/src/capnp/compiler/node-translator.c++
+++ b/c++/src/capnp/compiler/node-translator.c++
@@ -701,7 +701,6 @@ void NodeTranslator::compileNode(Declaration::Reader decl, schema::Node::Builder
 }
 
 static kj::StringPtr getExpressionTargetName(Expression::Reader exp) {
-  kj::StringPtr targetName;
   switch (exp.which()) {
     case Expression::ABSOLUTE_NAME:
       return exp.getAbsoluteName().getValue();
diff --git a/c++/src/capnp/serialize-test.c++ b/c++/src/capnp/serialize-test.c++
index d114358a..1bb735cb 100644
--- a/c++/src/capnp/serialize-test.c++
+++ b/c++/src/capnp/serialize-test.c++
@@ -27,6 +27,7 @@
 #include <kj/debug.h>
 #include <kj/compat/gtest.h>
 #include <kj/miniposix.h>
+#include <kj/test-util.h>
 #include <string>
 #include <stdlib.h>
 #include <fcntl.h>
@@ -374,45 +375,10 @@ TEST(Serialize, WriteMessageEvenSegmentCount) {
   EXPECT_TRUE(output.dataEquals(serialized.asPtr()));
 }
 
-#if _WIN32
-int mkstemp(char *tpl) {
-  char* end = tpl + strlen(tpl);
-  while (end > tpl && *(end-1) == 'X') --end;
-
-  for (;;) {
-    KJ_ASSERT(_mktemp(tpl) == tpl);
-
-    int fd = open(tpl, O_RDWR | O_CREAT | O_EXCL | O_TEMPORARY | O_BINARY, 0700);
-    if (fd >= 0) {
-      return fd;
-    }
-
-    int error = errno;
-    if (error != EEXIST && error != EINTR) {
-      KJ_FAIL_SYSCALL("open(mktemp())", error, tpl);
-    }
-
-    memset(end, 'X', strlen(end));
-  }
-}
-#endif
-
 TEST(Serialize, FileDescriptors) {
-#if _WIN32 || __ANDROID__
-  // TODO(cleanup): Find the Windows temp directory? Seems overly difficult.
-  char filename[] = "capnproto-serialize-test-XXXXXX";
-#else
-  char filename[] = "/tmp/capnproto-serialize-test-XXXXXX";
-#endif
-  kj::AutoCloseFd tmpfile(mkstemp(filename));
+  kj::AutoCloseFd tmpfile = kj::test::mkstempAutoErased();
   ASSERT_GE(tmpfile.get(), 0);
 
-#if !_WIN32
-  // Unlink the file so that it will be deleted on close.
-  // (For win32, we already handled this is mkstemp().)
-  EXPECT_EQ(0, unlink(filename));
-#endif
-
   {
     TestMessageBuilder builder(7);
     initTestMessage(builder.initRoot<TestAllTypes>());
diff --git a/c++/src/kj/CMakeLists.txt b/c++/src/kj/CMakeLists.txt
index 980c53e3..0a8a8679 100644
--- a/c++/src/kj/CMakeLists.txt
+++ b/c++/src/kj/CMakeLists.txt
@@ -21,6 +21,7 @@ set(kj_sources_lite
   test-helpers.c++
   units.c++
   encoding.c++
+  miniposix.c++
 )
 set(kj_sources_heavy
   refcount.c++
@@ -68,6 +69,7 @@ set(kj_headers
   main.h
   win32-api-version.h
   windows-sanity.h
+  miniposix.h
 )
 set(kj-parse_headers
   parse/common.h
@@ -101,9 +103,11 @@ install(FILES ${kj-std_headers} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/kj/std"
 
 set(kj-test_sources
   test.c++
+  test-util.c++
 )
 set(kj-test_headers
   test.h
+  test-util.h
 )
 set(kj-test-compat_headers
   compat/gtest.h
diff --git a/c++/src/kj/array.h b/c++/src/kj/array.h
index 3932f9f4..f4efd7ff 100644
--- a/c++/src/kj/array.h
+++ b/c++/src/kj/array.h
@@ -183,11 +183,11 @@ public:
   template <typename U>
   inline bool operator!=(const U& other) const { return asPtr() != other; }
 
-  inline ArrayPtr<T> slice(size_t start, size_t end) KJ_LIFETIMEBOUND {
+  inline constexpr ArrayPtr<T> slice(size_t start, size_t end) KJ_LIFETIMEBOUND {
     KJ_IREQUIRE(start <= end && end <= size_, "Out-of-bounds Array::slice().");
     return ArrayPtr<T>(ptr + start, end - start);
   }
-  inline ArrayPtr<const T> slice(size_t start, size_t end) const KJ_LIFETIMEBOUND {
+  inline constexpr ArrayPtr<const T> slice(size_t start, size_t end) const KJ_LIFETIMEBOUND {
     KJ_IREQUIRE(start <= end && end <= size_, "Out-of-bounds Array::slice().");
     return ArrayPtr<const T>(ptr + start, end - start);
   }
diff --git a/c++/src/kj/common.h b/c++/src/kj/common.h
index 42ecbbce..531b8063 100644
--- a/c++/src/kj/common.h
+++ b/c++/src/kj/common.h
@@ -1767,31 +1767,31 @@ public:
     static_assert(!isSameType<T, const char32_t>(), "see above");
   }
 
-  inline operator ArrayPtr<const T>() const {
+  inline constexpr operator ArrayPtr<const T>() const {
     return ArrayPtr<const T>(ptr, size_);
   }
-  inline ArrayPtr<const T> asConst() const {
+  inline constexpr ArrayPtr<const T> asConst() const {
     return ArrayPtr<const T>(ptr, size_);
   }
 
   inline constexpr size_t size() const { return size_; }
-  inline const T& operator[](size_t index) const {
+  inline constexpr const T& operator[](size_t index) const {
     KJ_IREQUIRE(index < size_, "Out-of-bounds ArrayPtr access.");
     return ptr[index];
   }
-  inline T& operator[](size_t index) {
+  inline constexpr T& operator[](size_t index) {
     KJ_IREQUIRE(index < size_, "Out-of-bounds ArrayPtr access.");
     return ptr[index];
   }
 
-  inline T* begin() { return ptr; }
-  inline T* end() { return ptr + size_; }
-  inline T& front() { return *ptr; }
-  inline T& back() { return *(ptr + size_ - 1); }
+  inline constexpr T* begin() { return ptr; }
+  inline constexpr T* end() { return ptr + size_; }
+  inline constexpr T& front() { return *ptr; }
+  inline constexpr T& back() { return *(ptr + size_ - 1); }
   inline constexpr const T* begin() const { return ptr; }
   inline constexpr const T* end() const { return ptr + size_; }
-  inline const T& front() const { return *ptr; }
-  inline const T& back() const { return *(ptr + size_ - 1); }
+  inline constexpr const T& front() const { return *ptr; }
+  inline constexpr const T& back() const { return *(ptr + size_ - 1); }
 
   inline ArrayPtr<const T> slice(size_t start, size_t end) const {
     KJ_IREQUIRE(start <= end && end <= size_, "Out-of-bounds ArrayPtr::slice().");
diff --git a/c++/src/kj/io-test.c++ b/c++/src/kj/io-test.c++
index ea7bac41..ef919131 100644
--- a/c++/src/kj/io-test.c++
+++ b/c++/src/kj/io-test.c++
@@ -26,11 +26,92 @@
 #include "io.h"
 #include "debug.h"
 #include "miniposix.h"
+#include "test-util.h"
 #include <kj/compat/gtest.h>
 
 namespace kj {
 namespace {
 
+#if INTPTR_MAX == INT64_MAX
+// These are helper constants for the large write to disk unit test. The basic idea is that we write
+// many GBs to disk & then validate that the contents were round-tripped correctly by reading it
+// back. This mechanism does a neat trick to avoid using a lot of memory. Since most (all?) modern
+// OSes oversubscribe & lazy allocate pages by COW mapping a reference page filled with 0s,
+// allocating 3 GB won't actually "do" anything. We then write out a prefix to each 1GB boundary
+// which means we'll dirty 3 pages with the remaining mapped to the reference page (this also
+// assumes that the allocation request will be handled by the OS rather than the user-space memory
+// allocator, but this seems like a safe assumption unless you're repeatedly running tests in the
+// same process that allocate such large amounts of RAM and the allocator happened to keep a lot of
+// pages around without returning it to the OS.
+
+static constexpr size_t ONE_GB = 1 * 1024 * 1024 * 1024;
+// Helper constant to represent the number of bytes in 1 GB.
+
+static constexpr size_t BUFFER_SIZE = 3 * ONE_GB;
+// The large write test uses 3GB as the target size of the I/O operation to perform as it's outside
+// the 2GB range that previously caused problems. Hopefully picking round numbers doesn't cause us
+// to test "happy" paths but a representative scenario of an arbitrarily large size.
+
+static constexpr kj::StringPtr ONE_GB_ALIGNED_PREFIXES_STORAGE[] = {
+// TODO(cleanup): KJ doesn't have an equivalent to std::array but if it were to that would be
+// preferred.
+  "kj says hello 1"_kj,
+  "kj says hello 2"_kj,
+  "kj says hello 3"_kj,
+};
+static constexpr kj::ArrayPtr<const kj::StringPtr> ONE_GB_ALIGNED_PREFIXES{ONE_GB_ALIGNED_PREFIXES_STORAGE};
+// These are prefixes for each 1GB that we right (i.e. the first GB will start with
+// "kj says hello 1" followed by 0s, the second GB will start with "kj says hello 2". This is just
+// used to confirm we've successfully written out all the pages in the correct order.
+
+static constexpr size_t PREFIX_SIZE_WITHOUT_NULL_TERMINATOR = ONE_GB_ALIGNED_PREFIXES[0].size();
+
+static const kj::StringPtr& nthPrefix(int gb) {
+  KJ_ASSERT(gb < ONE_GB_ALIGNED_PREFIXES.size());
+  return ONE_GB_ALIGNED_PREFIXES[gb];
+};
+
+static void setPrefix(char* ptr, int gb) {
+  KJ_ASSERT(gb < ONE_GB_ALIGNED_PREFIXES.size());
+  strcpy(ptr + gb * ONE_GB, (ONE_GB_ALIGNED_PREFIXES.begin() + gb)->cStr());
+};
+#endif
+
+TEST(Io, WriteLarge) {
+  // Check that writing a single large write > 2GB succeeds. This is primarily to workaround an
+  // Apple POSIX compliance issue (filed to Apple as FB8934446). This test only makes sense on
+  // 64-bit platforms as smaller platforms can't really even try to issue such large writes
+  // (since SSIZE_MAX on those platforms will be 2GB anyway).
+#if INTPTR_MAX == INT64_MAX
+  // Have to thunk through a temporary file since pipes would block on write trying to push this
+  // much data (i.e. would never get to read anything);
+
+  AutoCloseFd file = test::mkstempAutoErased();
+
+  {
+    FdOutputStream out(file.get());
+
+    auto toWrite = heapArray<char>(BUFFER_SIZE);
+    setPrefix(toWrite.begin(), 0);
+    setPrefix(toWrite.begin(), 1);
+    setPrefix(toWrite.begin(), 2);
+
+    out.write(toWrite.begin(), toWrite.size());
+  }
+
+  {
+    FdInputStream in(file.get());
+
+    for (int i = 0; i < 3; i++) {
+        auto toRead = heapString(PREFIX_SIZE_WITHOUT_NULL_TERMINATOR);
+        lseek(file.get(), i * ONE_GB, SEEK_SET);
+        in.read(toRead.begin(), toRead.size());
+        EXPECT_STREQ(nthPrefix(i).cStr(), toRead.cStr());
+    }
+  }
+#endif
+}
+
 TEST(Io, WriteVec) {
   // Check that writing an array of arrays works even when some of the arrays are empty.  (This
   // used to not work in some cases.)
@@ -58,6 +139,55 @@ TEST(Io, WriteVec) {
   EXPECT_STREQ("foobar", buf);
 }
 
+TEST(Io, WriteVecLarge) {
+  // Check that writing an array of arrays works when one a single writev entry is > 2GB. This is
+  // primarily to workaround an Apple POSIX compliance issue (filed to Apple as FB8934446). This
+  // test only makes sense on 64-bit platforms as smaller platforms can't really even try to issue
+  // such large writes (since SSIZE_MAX on those platforms will be 2GB anyway).
+
+  // NOTE: This unit test is optimistic that the splitting of the iovec is correct because the
+  // scatter/gather puts each GB into a separate iovec. For full bullet-proofness the test should
+  // arrange the writev call to ensure that boundary conditions are covered in that the partition
+  // terminates at the exact end of an iovec section (what this test does currently), the first byte
+  // of an iovec section, and somewhere in the middle (& potentially test that empty iovecs don't
+  // pose a problem).
+
+#if INTPTR_MAX == INT64_MAX
+  AutoCloseFd file = test::mkstempAutoErased();
+
+  {
+    auto toWrite = heapArray<char>(BUFFER_SIZE);
+
+    setPrefix(toWrite.begin(), 0);
+    setPrefix(toWrite.begin(), 1);
+    setPrefix(toWrite.begin(), 2);
+
+    ArrayPtr<const byte> pieces[] = {
+      arrayPtr(const_cast<const byte*>(toWrite.asBytes().begin()), ONE_GB),
+      arrayPtr(const_cast<const byte*>(toWrite.asBytes().begin()), 3 * ONE_GB),
+      arrayPtr(const_cast<const byte*>(toWrite.asBytes().begin() + 2 * ONE_GB), ONE_GB),
+    };
+
+    FdOutputStream out(file.get());
+    out.write(pieces);
+  }
+
+  {
+    // The file has 0th page prefix, 0th page prefix, 1st page prefix, 2nd page prefix, 2nd page prefix. 
+    auto expectedPrefixes = {0, 0, 1, 2, 2};
+
+    FdInputStream in(file.get());
+
+    for (int i = 0; i < expectedPrefixes.size(); i++) {
+        auto toRead = heapString(PREFIX_SIZE_WITHOUT_NULL_TERMINATOR);
+        lseek(file.get(), i * ONE_GB, SEEK_SET);
+        in.read(toRead.begin(), toRead.size());
+        EXPECT_STREQ(nthPrefix(*(expectedPrefixes.begin() + i)).cStr(), toRead.cStr());
+    }
+  }
+#endif
+}
+
 KJ_TEST("stringify AutoCloseFd") {
   int fds[2];
   KJ_SYSCALL(miniposix::pipe(fds));
diff --git a/c++/src/kj/io.c++ b/c++/src/kj/io.c++
index 59d12e58..72002b61 100644
--- a/c++/src/kj/io.c++
+++ b/c++/src/kj/io.c++
@@ -402,7 +402,7 @@ void FdOutputStream::write(ArrayPtr<const ArrayPtr<const byte>> pieces) {
   while (current < iov.end()) {
     // Issue the write.
     ssize_t n = 0;
-    KJ_SYSCALL(n = ::writev(fd, current, iov.end() - current), fd);
+    KJ_SYSCALL(n = miniposix::writev(fd, current, iov.end() - current), fd);
     KJ_ASSERT(n > 0, "writev() returned zero.");
 
     // Advance past all buffers that were fully-written.
diff --git a/c++/src/kj/miniposix.c++ b/c++/src/kj/miniposix.c++
new file mode 100644
index 00000000..4d8ddaa8
--- /dev/null
+++ b/c++/src/kj/miniposix.c++
@@ -0,0 +1,71 @@
+// Copyright (c) 2013-2014 Sandstorm Development Group, Inc. and contributors
+// Licensed under the MIT License:
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in
+// all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+// THE SOFTWARE.
+
+#include "miniposix.h"
+
+namespace kj {
+namespace miniposix {
+#if __APPLE__
+ssize_t writev(int fd, struct iovec* iov, size_t iovcnt) {
+  // Workaround for writev POSIX bug on Apple (filed as FB8934446) that prevents writes > 2GB.
+  // The process for doing this is:
+  //   1. We find the iov entry that causes us to exceed a 2GB write.
+  //   2. We truncate that entry to only have a length that would get us to 2GB
+  //   3. We do the actual write.
+  //   4. We restore the original length in the modified iovec entry before returning the result.
+  // This is a bit suboptimal for very large vectored I/O. This could be optimized at the cost of
+  // complicating the I/O on all other platforms + adding a bit of overhead (or providing a
+  // dedicated pessimizatioin path for MacO) in kj/io.c++, but this seems like enough of a corner
+  // case within kj/cap'n'proto for now that the simpler approach is more warranted. It seems
+  // unlikely to me that relative cost of doing large I/O doesn't absolutely dominate the CPU cost
+  // of finding this boundary.
+  ssize_t total = 0;
+  size_t originalTruncatedEntryLen = -1;
+  size_t numEntriesToWrite;
+
+  for (numEntriesToWrite = 0; numEntriesToWrite < iovcnt; ++numEntriesToWrite) {
+    // Step 1: Find the iov entry that would cause us to exceed a 2GB write.
+    total += iov[numEntriesToWrite].iov_len;
+
+    if (total > INT_MAX) {
+      // Step 2: Truncate the entry so that we only consume the part of it that gets us up to 2GB.
+       originalTruncatedEntryLen = iov[numEntriesToWrite].iov_len;
+       iov[numEntriesToWrite].iov_len = INT_MAX - (total - originalTruncatedEntryLen);
+
+       // Increment 1 final time since the break will skip the increment in the for loop but we
+       // still intend for this entry to be written (e.g. it might be the first one).
+       ++numEntriesToWrite;
+       break;
+    }
+  }
+
+  // Step 3: Do the write.
+  ssize_t result = ::writev(fd, iov, numEntriesToWrite);
+
+  // Step 4: Restore the original length of the iovec so that the caller 
+  if (originalTruncatedEntryLen != -1) {
+    iov[numEntriesToWrite - 1].iov_len = originalTruncatedEntryLen;
+  }
+  return result;
+}
+#endif
+}  // namespace miniposix
+}  // namespace kj
diff --git a/c++/src/kj/miniposix.h b/c++/src/kj/miniposix.h
index e9ae848d..2bae9edb 100644
--- a/c++/src/kj/miniposix.h
+++ b/c++/src/kj/miniposix.h
@@ -29,10 +29,12 @@
 #include <direct.h>
 #include <fcntl.h>  // _O_BINARY
 #else
-#include <limits.h>
 #include <errno.h>
 #endif
 
+#include <stdint.h>
+#include <limits.h>
+
 #if !_WIN32 || __MINGW32__
 #include <unistd.h>
 #include <sys/stat.h>
@@ -56,12 +58,11 @@ namespace miniposix {
 
 typedef int ssize_t;
 
-inline ssize_t read(int fd, void* buffer, size_t size) {
-  return ::_read(fd, buffer, size);
-}
-inline ssize_t write(int fd, const void* buffer, size_t size) {
-  return ::_write(fd, buffer, size);
-}
+// Windows I/O supports maximum 4GB at a time so make sure we saturate rather than overflow when
+// the caller requests a much larger size.
+#define KJ_OS_MAX_IO UINT_MAX
+#define KJ_OS_IO_FUNC(func) _ ## func
+
 inline int close(int fd) {
   return ::_close(fd);
 }
@@ -91,8 +92,24 @@ inline int close(int fd) {
 // We're on a POSIX system or MinGW which already defines the wrappers for us.
 
 using ::ssize_t;
-using ::read;
-using ::write;
+
+#if __APPLE__
+// Workaround for FB8934446 - even though the APIs take size_t arguments they're (incorrectly)
+// internally limited to INT_MAX.
+#define KJ_OS_MAX_IO INT_MAX
+#elif INTPTR_MAX >= INT64_MAX
+// Normal POSIX platforms are limited to SSIZE_MAX. However on 64-bit platforms there's no point
+// saturating any input I/O lengths - that would be 9 exabytes & insane to do in 1 I/O call.
+// Using SIZE_MAX ensures that the kj::min evaluation should be elided and the read/write/writev
+// calls should inlined directly to the libc function.
+#define KJ_OS_MAX_IO SIZE_MAX
+#else
+// On 32-bit platforms make sure that trying to do large I/O still works correctly (saturating &
+// returning the length that was processed rather than returning a low-level error).
+#define KJ_OS_MAX_IO SSIZE_MAX
+#endif
+#define KJ_OS_IO_FUNC(func) func
+
 using ::close;
 
 #endif
@@ -136,8 +153,25 @@ static constexpr inline size_t iovMax() {
 #error "Please determine the appropriate constant for IOV_MAX on your system."
 #endif
 
+#if __APPLE__
+// Unlike stock libc writev we're forced to take the iov non-const because the internal details of
+// this POSIX-emulation require us to potentially modify the iovec when writes > 2GB occur.
+ssize_t writev(int fd, struct iovec* iov, size_t iovcnt);
+#else
+using ::writev;
+#endif
 #endif
 
+static inline ssize_t read(int fd, void* buffer, size_t size) {
+  return ::KJ_OS_IO_FUNC(read)(fd, buffer, static_cast<unsigned int>(kj::min(size_t{KJ_OS_MAX_IO}, size)));
+}
+
+static inline ssize_t write(int fd, const void* buffer, size_t size) {
+#if defined(_MSC_VER) && !defined(__clang__)
+#pragma warning(suppress : 4996)
+#endif
+  return ::KJ_OS_IO_FUNC(write)(fd, buffer, static_cast<unsigned int>(kj::min(size_t{KJ_OS_MAX_IO}, size)));
+}
 }  // namespace miniposix
 }  // namespace kj
 
diff --git a/c++/src/kj/string.h b/c++/src/kj/string.h
index 10b97887..8e53417b 100644
--- a/c++/src/kj/string.h
+++ b/c++/src/kj/string.h
@@ -72,13 +72,13 @@ namespace kj {
 
 class StringPtr {
 public:
-  inline StringPtr(): content("", 1) {}
-  inline StringPtr(decltype(nullptr)): content("", 1) {}
+  inline constexpr StringPtr(): content("", 1) {}
+  inline constexpr StringPtr(decltype(nullptr)): content("", 1) {}
   inline StringPtr(const char* value KJ_LIFETIMEBOUND): content(value, strlen(value) + 1) {}
-  inline StringPtr(const char* value KJ_LIFETIMEBOUND, size_t size): content(value, size + 1) {
+  inline constexpr StringPtr(const char* value KJ_LIFETIMEBOUND, size_t size): content(value, size + 1) {
     KJ_IREQUIRE(value[size] == '\0', "StringPtr must be NUL-terminated.");
   }
-  inline StringPtr(const char* begin KJ_LIFETIMEBOUND, const char* end KJ_LIFETIMEBOUND): StringPtr(begin, end - begin) {}
+  inline constexpr StringPtr(const char* begin KJ_LIFETIMEBOUND, const char* end KJ_LIFETIMEBOUND): StringPtr(begin, end - begin) {}
   inline StringPtr(String&& value KJ_LIFETIMEBOUND) : StringPtr(value) {}
   inline StringPtr(const String& value KJ_LIFETIMEBOUND);
   inline StringPtr(const ConstString& value KJ_LIFETIMEBOUND);
@@ -102,7 +102,7 @@ public:
     typename T,
     typename = decltype(instance<T>().c_str()),
     typename = decltype(instance<T>().size())>
-  inline StringPtr(const T& t KJ_LIFETIMEBOUND): StringPtr(t.c_str(), t.size()) {}
+  inline constexpr StringPtr(const T& t KJ_LIFETIMEBOUND): StringPtr(t.c_str(), t.size()) {}
   // Allow implicit conversion from any class that has a c_str() and a size() method (namely, std::string).
   // We use a template trick to detect std::string in order to avoid including the header for
   // those who don't want it.
@@ -110,7 +110,7 @@ public:
     typename T,
     typename = decltype(instance<T>().c_str()),
     typename = decltype(instance<T>().size())>
-  inline operator T() const { return {cStr(), size()}; }
+  inline constexpr operator T() const { return {cStr(), size()}; }
   // Allow implicit conversion to any class that has a c_str() method and a size() method (namely, std::string).
   // We use a template trick to detect std::string in order to avoid including the header for
   // those who don't want it.
@@ -121,13 +121,13 @@ public:
   inline ArrayPtr<const byte> asBytes() const { return asArray().asBytes(); }
   // Result does not include NUL terminator.
 
-  inline const char* cStr() const { return content.begin(); }
+  inline constexpr const char* cStr() const { return content.begin(); }
   // Returns NUL-terminated string.
 
-  inline size_t size() const { return content.size() - 1; }
+  inline constexpr size_t size() const { return content.size() - 1; }
   // Result does not include NUL terminator.
 
-  inline char operator[](size_t index) const { return content[index]; }
+  inline constexpr char operator[](size_t index) const { return content[index]; }
 
   inline constexpr const char* begin() const { return content.begin(); }
   inline constexpr const char* end() const { return content.end() - 1; }
diff --git a/c++/src/kj/test-util.c++ b/c++/src/kj/test-util.c++
new file mode 100644
index 00000000..98da942d
--- /dev/null
+++ b/c++/src/kj/test-util.c++
@@ -0,0 +1,74 @@
+// Copyright (c) 2020-2021 Cap'n Proto Contributors
+// Licensed under the MIT License:
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in
+// all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+// THE SOFTWARE.
+
+#include "debug.h"
+#include "test-util.h"
+#include <stdlib.h>
+
+#if !defined(_WIN32)
+#include <unistd.h>
+#else
+#include <io.h>
+#endif
+
+#if _WIN32 || __ANDROID__
+// TODO(cleanup): Find the Windows temp directory? Seems overly difficult pre C++17.
+// https://en.cppreference.com/w/cpp/filesystem/temp_directory_path
+// would require refactoring the mkstemp code a bit to take into account the types
+// needed to do this at runtime.
+#define KJ_TMPDIR_PREFIX ""
+#else
+#define KJ_TMPDIR_PREFIX "/tmp/"
+#endif
+
+namespace kj {
+namespace test {
+AutoCloseFd mkstempAutoErased() {
+  char tpl[] = KJ_TMPDIR_PREFIX "kj-testfile-XXXXXX.tmp";
+
+#if _WIN32
+  char* end = tpl + strlen(tpl);
+  while (end > tpl && *(end-1) == 'X') --end;
+
+  for (;;) {
+    KJ_ASSERT(_mktemp(tpl) == tpl);
+
+    int fd = open(tpl, O_RDWR | O_CREAT | O_EXCL | O_TEMPORARY | O_BINARY | O_SHORT_LIVED | O_NOINHERET, 0700);
+    if (fd >= 0) {
+      return fd;
+    }
+
+    int error = errno;
+    if (error != EEXIST && error != EINTR) {
+      KJ_FAIL_SYSCALL("open(mktemp())", error, tpl);
+    }
+
+    memset(end, 'X', strlen(end));
+  }
+#else
+  int fd;
+  KJ_SYSCALL(fd = ::mkstemp(tpl), tpl);
+  KJ_SYSCALL(::unlink(tpl), tpl);
+  return AutoCloseFd{fd};
+#endif
+}
+}  // namespace test
+}  // namespace kj
diff --git a/c++/src/kj/test-util.h b/c++/src/kj/test-util.h
new file mode 100644
index 00000000..80c5d3ce
--- /dev/null
+++ b/c++/src/kj/test-util.h
@@ -0,0 +1,34 @@
+// Copyright (c) 2020-2021 Cap'n Proto Contributors
+// Licensed under the MIT License:
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in
+// all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+// THE SOFTWARE.
+
+#pragma once
+
+#include "io.h"
+
+namespace kj {
+namespace test {
+AutoCloseFd mkstempAutoErased();
+// Equivalent to mkstemp but guaranteed to have the temporary file cleaned up
+// on or before close. *NIX platforms unlink the temporary file from the
+// filesystem before returning. Windows will delete the file when the handle
+// is closed.
+}  // namespace test
+}  // namespace kj
